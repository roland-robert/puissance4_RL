class Hyperparameters:
    def __init__(self):
        self.lr = 0.01
        self.Qlr = 0
        self.gamma = 0.95

        self.eps = 0.99 #randomness
        self.min_eps = 0.05
        self.decay = 0.01



        self.seed = 10
        self.std = 0.1
        self.mean = 0
        
        #self.loss = tf.keras.losses.MeanSquaredError()
        self.loss = tf.keras.losses.MeanSquaredError()
        #self.loss = tf.keras.losses.Huber()
        
        self.metric=tf.keras.metrics.MeanSquaredError()
        self.kern_initializer = tf.keras.initializers.RandomNormal(mean=self.mean, stddev=self.std, seed=self.seed)
        #self.kern_initializer = tf.keras.initializers.GlorotUniform(seed = self.seed)
        self.bias_initializer = tf.keras.initializers.Zeros()
        self.optimizer = tf.keras.optimizers.SGD(learning_rate=self.lr)
        
        self.maxmemlen = 10000 #memoire maxi des coups 
        self.games_before_train = 1
        self.games_before_sync = 4
        self.allow_illegal_moves = False

        #self.MIN_REPLAY_SIZE = 500
        self.batch_size = 16
        self.sample_size = 256
        
    def real_randomness(self, epoch):
         return self.min_eps + (self.eps - self.min_eps)*np.exp(-self.decay*epoch)
class DQNAgent:
    def __init__(self, h=6, w=7, model = 0) -> None:
        self.h = h
        self.w = w
        self.hpp = Hyperparameters()
        self.game = Game(h,w) #just for rules
        if model == 0:
            
            self.model = Sequential()
            self.model.add(layers.Dense(units = 256, input_shape = (h*w,), activation = "selu", 
                  kernel_initializer=self.hpp.kern_initializer,
                  bias_initializer=self.hpp.bias_initializer))
            self.model.add(layers.Dense(units = 128, input_shape = (h*w,), activation = 'tanh', 
                  kernel_initializer=self.hpp.kern_initializer,
                  bias_initializer=self.hpp.bias_initializer))

            self.model.add(layers.Dense(units = w,activation = "tanh"))
        
            self.model.compile(optimizer = self.hpp.optimizer, 
                   loss = self.hpp.loss,
                   metrics=[tf.keras.metrics.MeanSquaredError()])